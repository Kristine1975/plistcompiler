#!/bin/bash
# the next line restarts using tclsh \
exec tclsh "$0" "$@"

# ===========================================================================
# File: "PlistComp.tcl"
#                        Created: 2005-10-01 21:46:19
#              Last modification: 2007-09-04 11:59:06
# Author: Bernard Desgraupes
# e-mail: <bdesgraupes@users.sourceforge.net>
# www: <http://sourceforge.net/projects/plistcompiler>
# (c) Copyright: Bernard Desgraupes 2005-2007
# All rights reserved.
# ===========================================================================

namespace eval plc {}

# This is for debugging when the script is used repeatedly in the same interpreter
unset -nocomplain plc_def plc_int plc

# Current version number
set plc(version) "0.6rc3"

# Retrieving the values of the shell variables: the env array contains the
# values for all the environment variables defined by XCode.
array set plc_def [array get env]

# Legacy: predefined variables of the CodeWarrior property list compiler 
if {[info exists env(MACOS_CREATOR)]} {
	set plc_int(__OUTPUT_CREATOR__) $env(MACOS_CREATOR)
} else {
	set plc_int(__OUTPUT_CREATOR__) ""
}
if {[info exists env(MACOS_TYPE)]} {
	set plc_int(__OUTPUT_TYPE__) $env(MACOS_TYPE)
}  else {
	set plc_int(__OUTPUT_TYPE__) ""
}
if {[info exists env(PRODUCT_NAME)]} {
	set plc_int(__OUTPUT_FILENAME__) $env(PRODUCT_NAME)
}  else {
	set plc_int(__OUTPUT_FILENAME__) ""
}
	
# Predefined variables
# --------------------
# Enclose them between double underscores to invoke 
# them in the plc file. For instance __DATE__ or __YEAR__
set plc_int(__DATE__) [clock format [clock seconds] -format "%Y-%m-%dT%H:%M:%SZ"]
set plc_int(__SHORTDATE__) [clock format [clock seconds] -format "%Y-%m-%d"]
set plc_int(__YEAR__) [clock format [clock seconds] -format "%Y"]
set plc_int(__MONTH__) [clock format [clock seconds] -format "%m"]
set plc_int(__MONTHNAME__) [clock format [clock seconds] -format "%B"]
set plc_int(__DAY__) [clock format [clock seconds] -format "%d"]
set plc_int(__DAYNAME__) [clock format [clock seconds] -format "%A"]
set plc_int(__TIME__) [clock format [clock seconds] -format "%H:%M:%S"]
set plc_int(__HOURS__) [clock format [clock seconds] -format "%H"]
set plc_int(__MINUTES__) [clock format [clock seconds] -format "%M"]
set plc_int(__SECONDS__) [clock format [clock seconds] -format "%S"]

# Initializations
# ---------------
set plc(context) ""
set plc(contextlevel) 0
set plc(parsing) 0
set plc(localizing) 0
set plc(pkginfo) 0
set plc(currkey) ""
set plc(escape_entities) 1

set plc_int(__PLIST__) "1.0"
set plc(output_filename) ""
# (vs 0.4) Use TARGET_BUILD_DIR instead of BUILT_PRODUCTS_DIR to point to
# the correct location regardless of the value of DEPLOYMENT_LOCATION
if {[info exists env(TARGET_BUILD_DIR)] && [info exists env(INFOPLIST_PATH)]} {
	set plc(output_folder) [file join $env(TARGET_BUILD_DIR) [file dir $env(INFOPLIST_PATH)]]
} 
set plc(in_package_directory) ""
set plc(localize_directory) "Resources"

if {[info exists env(HEADER_SEARCH_PATHS)]} {
	set plc(search_path) $env(HEADER_SEARCH_PATHS)
}  else {
	set plc(search_path) ""
}

set plc(input_encoding) "macRoman"
set plc(output_encoding) "utf-8"
set plc(input_eol) "cr"
set plc(output_eol) "cr"
set plc(eols) [list "cr" "lf" "crlf"]


# Nesting level of a conditional block (anything between an if and the 
# corresponding endif).
# 		if endif
# 		if else endif
# 		if elif [elif..] endif
# 		if elif [elif..] else endif
# Level 0 means outside of any conditional block.
set plc(iflevel) 0
# plc(execdone-XX) tells if some previous section of a conditional block at
# level XX has already been executed. If yes, no other section can be made
# executable.
set plc(execdone-1) 0
# plc(doexec-XX) tells if execution is active at a level XX. Level 0 is 
# always executable.
set plc(doexec-0) 1

# Base64 encoding
set plc(base64) [list \
  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \
  a b c d e f g h i j k l m n o p q r s t u v w x y z \
  0 1 2 3 4 5 6 7 8 9 + / ]
set plc(wraplen) 60

# Main proc
proc plc::execute {args} {
	global plc plc_int
	set len [llength $args]
	if {$len == 0} {
		puts "Error: wrong number of arguments"
		plc::usage
		return
	} 
	# Handle the -help option
	if {$len == 1 && [string match "-h*" $args]} {
		plc::usage 1 
		return
	} 
	# Handle the -help option
	if {$len == 1 && [string match "-v*" $args]} {
		puts "$plc(version)"
		return
	} 
	# Handle the -encodings option
	if {$len == 1 && [string match "-e*" $args]} {
		puts "Available encodings:"
		puts [join [lsort [concat [encoding names] "utf-16"]] ", "]
		return
	} 
	# Retrieve the last argument
	set srcfile [plc::resolveFile [lindex $args end]]
	if {![file exists $srcfile]} {
		error "can't find '$srcfile'. No such file."
	} 
	set plc(input_file) $srcfile
	# Define a default output folder in case nothing was inherited 
	# from the XCode settings (for instance, if the script is used directly 
	# from Terminal). This can be overridden by a -dest option below.
	if {![info exists plc(output_folder)]} {
		set plc(output_folder) [file dir $srcfile]
	} 

	# Parse the options
	incr len -1
	set failed 0
	for {set i 0} {$i < $len} {incr i} {
		# Ignore the leading hyphen
		set elem [string trimleft [lindex $args $i] "-"]
		switch -- $elem {
			"input_encoding" 
			- "output_encoding" {
				incr i
				if {$i <= $len} {
					set value [lindex $args $i]
					if {$value eq "utf-16"} {
						set value "unicode"
					} 
					if {[lsearch [encoding names] $value] == -1} {
						puts "Error: wrong value '$value' for encoding option.\nShould be one of [join [lsort [concat [encoding names] "utf-16"]] ", "]"
						return
					} 
					set plc($elem) $value
				} else {
					set failed 1
				}
			}
			"input_eol"
			- "output_eol" {
				incr i
				if {$i <= $len} {
					plc::setEol $elem [lindex $args $i]
				} else {
					set failed 1
				}
			}
			"dest" {
				incr i
				if {$i < $len} {
					set plc(output_folder) [file normalize [lindex $args $i]]
				} else {
					set failed 1
				}
			}
			"o" {
				# Vs-0.5: implement an -o option (this slightly modifies
				# patch 1474228 contributed by Jens Miltner - thanks!).
				# If a full path is passed (i-e the string starts with a
				# slash), set output_folder and output_filename accordingly,
				# otherwise use the value as the output file name and build
				# output_folder as usual.
				incr i
				if {$i < $len} {
					set outname [lindex $args $i]
					if {[string index $outname 0] eq "/"} {
						set plc(output_folder) [file dir $outname]
						set plc(output_filename) [file tail $outname]
					} else {
						set plc(output_filename) $outname
					}
				} else {
					set failed 1
				}
			}
			"I" {
				# Contributed by Jens Miltner (thanks!)
				incr i
				if {$i < $len} {
					lappend plc(search_path) [plc::resolveFile [lindex $args $i]]
				} else {
					set failed 1
				}
			}
			"plist" {
				incr i
				if {$i < $len} {
					set plc_int(__PLIST__) [lindex $args $i]
				} else {
					set failed 1
				}
			}
			"pkginfo" {
				set plc(pkginfo) 1
			}
			"prefix" {
				incr i
				if {$i < $len} {
					set prefixFile [plc::resolveFile [lindex $args $i]]
				} else {
					set failed 1
				}
			}
			default {
				if {[string index $elem 0] eq "D"} {
					set macro [string range $elem 1 end]					
					set macro [split $macro "="]
					plc::defineMacro [lindex $macro 0] [list [lindex $macro 1]]
				} else {
					error "unknown option $elem"
				}
			}
		}
		
		if {$failed} {
			puts "Error: missing value for option '$elem'\n"
			plc::usage
			return
		} 
	} 
	
	if {[info exists prefixFile]} {
		if {[file exists $prefixFile]} {
			plc::processFile $prefixFile
		} else {
			error "can't find prefix file $prefixFile"
		}
	}
	
	# Now call the compiler
	plc::processFile $srcfile

	# Generate PkgInfo file, if requested
	if {$plc(pkginfo)} {
		plc::generatePkgInfo
	}
}

proc plc::normalize {txt} {
	# Replace line continuation backslashes: a backslash at the end of a
	# line is a line continuation character. It is removed and the next
	# line is concatenated to the previous one after any initial spaces
	# have been trimmed.
	regsub -all {\\[\r\n][ \t]+} $txt "" txt
	
	# Strip comments: if a line starts with // it is deleted
	# unconditionnally. If the // is not at the beginning of the line, it
	# is considered as a comment only if there is no double quote after it
	# otherwise it might be a double slash inside a quoted string.
	regsub  -line -all {^//.*$} $txt {} txt
	regsub  -line -all {//[^"]*$} $txt {} txt

	# Regexp to capture C-like comments (works with the (?w) directive or
	# -lineanchor option):
	regsub -all -lineanchor {/\*([^*]|\*+[^*/])*\*+/} $txt {} txt

	# Cut all the instructions
	regsub -all {\s+value\s+(dictionary|array)\s*} $txt "\r\\1\r" txt
	regsub -all {\s+value\s+(boolean|number|date|data|string)} $txt "\r\\1" txt
	regsub -line -all {^\s*(plist|dictionary|array)\s*} $txt "\\1\r" txt
	regsub -all {^({|\[)\s*(}|\])} $txt "\\1\r\\2" txt

	# Align them on the left margin
	regsub -line -all "^\[ \t\]+" $txt "" txt

	# Remove empty lines
	regsub -line -all "^\[\r\n\]" $txt "" txt
	return $txt	
}

proc plc::processFile {file} {
	global plc
	# The existence of the file has been checked by the caller
	set fid [open $file]
	fconfigure $fid -encoding $plc(input_encoding) -translation $plc(input_eol)
	set txt [read $fid]
	close $fid
	plc::parseContents $txt
}

proc plc::parseContents {txt} {
	global plc
	set txt [split [plc::normalize $txt] "\r\n"]
	set len [llength $txt]
	for {set index 0} {$index < $len} {incr index} {
		set line [lindex $txt $index]
		if {[string length $line] == 0} {
			continue
		} 
		# Look at the first character of the line
		set first [string range $line 0 0]
		
		switch -- $first {
			"#" {
				# This is a preprocessor macro. The [plc::parseMacro] proc 
				# returns the number of lines it has parsed
				plc::parseMacro $line
			}
			"{" - "\[" {
				# nothing
			}
			"}" - "\]" {
				if {[set plc(doexec-$plc(iflevel))]} {
					plc::contextEnd $first
				}
			}
			default {
				if {[set plc(doexec-$plc(iflevel))]} {
					if {[regexp {^(\w+)\s*(.*)$} $line -> cmd arg]} {
						switch -- $cmd {
							"plist"
							- "dictionary"
							- "array"
							- "string"
							- "boolean"
							- "date"
							- "data"
							- "number" 
							- "key" 
							- "comment" 
							- "localize" {
								if {[info exists arg]} {
									# Replace outer single quotes (if any) by double quotes
									regsub "^'(.*)'$" $arg "\"\\1\"" arg
									eval plc::parse[string totitle $cmd] [plc::quote $arg]
								} else {
									plc::parse[string totitle $cmd]
								}
							}
							default {
								error "unknown command '$cmd'"
							}
						}
					} 
				} 
			}
		}
	}
}

proc plc::parseMacro {line} {
	global plc plc_def plc_int
	if {[regexp {#[ \t]*(\w+)[ \t]*([^\r\n]*)$} $line -> macro definition]} {
		if {[set plc(doexec-$plc(iflevel))]} {
			switch -- $macro {
				"if" {
					incr plc(iflevel)
					set value ""
					foreach a $definition {
						lappend value [plc::substDefinition $a]
					} 
					set condition [eval expr $value]
					set plc(execdone-$plc(iflevel)) $condition
					set plc(doexec-$plc(iflevel)) $condition
				}
				"ifdef" {
					incr plc(iflevel)
					set var [string trim $definition]
					set condition [expr [info exists plc_def($var)] || [info exists plc_int($var)]]
					set plc(execdone-$plc(iflevel)) $condition
					set plc(doexec-$plc(iflevel)) $condition
				}
				"ifndef" {
					incr plc(iflevel)
					set var [string trim $definition]
					set condition [expr ![info exists plc_def($var)] && ![info exists plc_int($var)]]
					set plc(execdone-$plc(iflevel)) $condition
					set plc(doexec-$plc(iflevel)) $condition
				}
				"elif" {
					set plc(doexec-$plc(iflevel)) 0
				}
				"else" {
					set plc(doexec-$plc(iflevel)) 0
				}			
				"endif" {
					set plc(execdone-$plc(iflevel)) 0
					set plc(doexec-$plc(iflevel)) 0
					incr plc(iflevel) -1
				}
				"include" {
					processInclude $definition
				}
				"define" {
					if {[regexp {(\w+)[ \t]*([^\r\n]*)$} $definition -> value arg]} {
						plc::defineMacro $value $arg
					} 
				}
				"undef" {
					if {[regexp {\w+} $definition value]} {
						if {[info exists plc_int($value)]} {
							error "can't undef predefined macro '$value'"
						} 
						unset -nocomplain plc_def($value)
					} 
				}
				"error" {
					set value ""
					foreach a $definition {
						append value [plc::substitute $a]
					} 
					puts "#error: $value"
					error "processing interrupted by #error macro"
				}
				"warning" - "message" {
					set value ""
					foreach a $definition {
						append value [plc::substitute $a]
					} 
					puts "[string totitle $macro]: $value"
				}
				"pragma" {
					if {[regexp {(\w+)[ \t]*([^\r\n]*)$} $definition -> name arg]} {
						set value ""
						foreach a $arg {
							append value [plc::substitute $a]
						} 
						plc::parsePragma $name $value
					}
				}
			}
		} else {
			switch -- $macro {
				"if" - "ifdef" - "ifndef" {
					incr plc(iflevel)
					set plc(execdone-$plc(iflevel)) 0
					set plc(doexec-$plc(iflevel)) 0
				}
				"elif" {
					# Check if execution is on at the preceding level
					if { $plc(iflevel) \
					  && [set plc(doexec-[expr {$plc(iflevel) - 1}])] \
					  && !$plc(execdone-$plc(iflevel)) } {
						# Evaluate the condition
						set value ""
						foreach a $definition {
							lappend value [plc::substDefinition $a]
						} 
						set condition [eval expr $value]
						set plc(execdone-$plc(iflevel)) $condition
						set plc(doexec-$plc(iflevel)) $condition
					} 
				}
				"else" {
					if { $plc(iflevel) \
					  && [set plc(doexec-[expr {$plc(iflevel) - 1}])] \
					  && !$plc(execdone-$plc(iflevel)) } {
						set plc(execdone-$plc(iflevel)) 1
						set plc(doexec-$plc(iflevel)) 1
					} 
				}
				"endif" {
					set plc(execdone-$plc(iflevel)) 0
					set plc(doexec-$plc(iflevel)) 0
					incr plc(iflevel) -1
				}
			}
		} 
	} 
}

# Use the HEADER_SEARCH_PATHS variable to resolve includes.
# Author: Franz Detro <franz.detro@native-instruments.de>
proc plc::processInclude {name} {
	global plc 
	
	set saveFile $plc(input_file)
	set headerPathOnly 0
	# Remove outer < > (if any)
	if {[regsub "^<(.*)>$" $name "\\1" name]} {
		set headerPathOnly 1
	} 	
	# Remove outer quotes and whitespace chars
	set name [string trim $name "\""]
	
	if {[file exists $name]} {
		# 'name' is an absolute path
		set plc(input_file) $name
	} else {
		set found 0
		if {!$headerPathOnly} {
			# Search relatively to the dir of the parent file
			set plc(input_file) [file normalize [file join [file dir $saveFile] $name]]
			set found [file exists $plc(input_file)]
		}
		# If the file does not exist, look on the search paths
		# (HEADER_SEARCH_PATHS variable and -I options)
		if {!$found} {
			foreach dir $plc(search_path) {
				set candidate [file normalize [file join $dir $name]]			
				if {[file exists $candidate]} {			
					set plc(input_file) $candidate
					set found 1
					break
				}
			} 
		} 
		if {!$found} {
			error "can't find file '$name' to include"
		} 
	} 
	
	plc::processFile $plc(input_file)
	set plc(input_file) $saveFile
}

proc plc::parsePragma {name value} {
	global plc plc_int
	# Pragmas are not allowed inside a 'plist' or 'localize' block
	if {$plc(parsing)} {
		error "illegal '#$name' pragma in plist block"
	}
	switch -- $name {
		"output_encoding" {
			if {$value eq "utf-16"} {
				set value "unicode"
			} 
			set plc(output_encoding) $value
		}
		"plist_version" {
			set plc_int(__PLIST__) $value
		}
		"escape_entities" {
			 if {$value eq "on"} {
				 set value 1
			 } elseif {$value eq "off"} {
				 set value 0
			 } 
			 set plc($name) $value
		}
		"output_filename" 
		- "in_package_directory" 
		- "localize_directory" {
			set plc($name) $value
		}
		"output_eol" {
			plc::setEol $name $value
		}
		"mark" {
			# Silently ignored
		}
		"once" - "notonce" {
			# Not supported
			puts "ignoring unsupported pragma $name"
		}
		default {
			# Ignore other pragmas
			puts "ignoring unknown pragma $name"
		}
	}
}

proc plc::parsePlist {args} {
	global plc plc_int
	plc::checkContext plist
	set outfolder [file normalize [file join $plc(output_folder) $plc(in_package_directory)]]
	# See if a custom name has been declared by an output_filename pragma
	# (or, since version 0.5, by an -o option on the command line)
	if {[info exists plc(output_filename)] && $plc(output_filename) ne ""} {
		set outname $plc(output_filename)
		unset -nocomplain plc(output_filename)
	} else {
		set outname "Info.plist"
	}
	plc::openOutFile [file join $outfolder $outname]
	plc::writePreamble
	plc::writeTag "plist version=\"$plc_int(__PLIST__)\"" 
	plc::contextStart "plist"
}

proc plc::parseDictionary {args} {
	plc::writeTag "dict"
	plc::contextStart "dict"
}

proc plc::parseArray {args} {
	plc::writeTag "array"
	plc::contextStart "array"
}

proc plc::parseString {args} {
	global plc
	set value ""
	foreach a $args {
		append value [plc::substitute $a]
	} 
	
	if {$plc(escape_entities)} {
		# (vs 0.4) Substitute entities for the &, ', ", < and > symbols
		regsub -all {&} $value {\&amp;} value
		regsub -all {<} $value {\&lt;} value
		regsub -all {>} $value {\&gt;} value
		regsub -all {"} $value {\&quot;} value
		regsub -all {'} $value {\&apos;} value
	} 
	
	if {$plc(localizing)} {
		plc::writeOut "\"$value\";\n"
	} else {
		plc::writeTag string
		plc::writeOut $value
		plc::writeTag string close
		if {$plc(pkginfo)} {
			if {$plc(currkey) eq "CFBundleSignature"} {
				set plc(bundle_signature) $value			
			} elseif {$plc(currkey) eq "CFBundlePackageType"} {
				set plc(bundle_type) $value
			}
		} 
	}
}

proc plc::parseBoolean {args} {
	# Make variable substitution (Patch 1683197 by Ron Wilson <wilee@users.sourceforge.net> - thanks!)
	set value ""
	foreach a $args {
		append value [plc::substitute $a]
	}
	# Accept any casing (true, TRUE, True etc)
	set value [string tolower $value]
	# Accept other boolean values (yes/no, 1/0)
	if {$value eq "yes" || $value == 1} {
		set value "true"
	} elseif {$value eq "no" || $value == 0} {
		set value "false"
	} 
	# Reject other values
	if {$value ne "true" && $value ne "false"} {
		error "Illegal '$value' value for boolean keyword"
	} else {
		plc::writeTag $value empty
	}	
}

proc plc::parseDate {args} {
	plc::writeTag date
	set value ""
	foreach a $args {
		append value [plc::substitute $a]
	} 
	plc::writeOut $value
	plc::writeTag date close
}

proc plc::parseData {args} {
	plc::writeTag data
	set data ""
	foreach a $args {
		append data $a
	} 
	regsub -all " " $data "" data
	# Do some checking
	if {![string is xdigit $data]} {
		error "Illegal hex data: $data"
	} 
	if {[expr {[string length $data] % 2}]} {
		error "expected even number of hex digit but got $data"
	} 
	# Need to convert to Base64 here. Todo...
	plc::writeOut [plc::encodeBase64 $data]
	plc::writeTag data close
}

proc plc::parseNumber {args} {
	set value ""
	foreach a $args {
		append value [plc::substitute $a]
	} 
	# Check the value format 
	if {![string is double $value]} {
		error "not a number '$value'"
	} 
	if {[regexp {\.} $value]} {
		set num real
	} else {
		set num integer
	}
	plc::writeTag $num
	plc::writeOut $value
	plc::writeTag $num close
}

proc plc::parseKey {args} {
	global plc
	set value ""
	foreach a $args {
		append value [plc::substitute $a]
	} 
	if {$plc(localizing)} {
		plc::writeOut "\"$value\" = "
	} else {
		plc::writeTag "key"
		plc::writeOut $value
		plc::writeTag "key" close
		set plc(currkey) $value
	}
}

proc plc::parseComment {args} {
	global plc
	set context [lrange $plc(context) 0 0]
	if {$context eq "localize"} {
		set value ""
		foreach a $args {
			append value [plc::substitute $a]
		} 
		set txt "/* $value */\n"
		plc::writeOut $txt
	} else {
		error "illegal 'comment' keyword in $context block"
	}
}

proc plc::parseLocalize {args} {
	global plc 
	plc::checkContext localize
	set plc(localizing) 1
	set lang [lindex $args 0]
	if {$lang ne ""} {
		set outfolder [file join $plc(output_folder) $plc(localize_directory) $lang.lproj]
	} else {
		error "no language specified with 'localize' keyword"
	}
	# Look for more arguments ('localize as "language"')
	set outname ""
	if {[lindex $args 1] eq "as"} {
		set outname [lindex $args 2]
	} 
	if {$outname eq ""} {
		if {[info exists plc(output_filename)] && $plc(output_filename) ne ""} {
			set outname $plc(output_filename)
			unset -nocomplain plc(output_filename)
		} else {
			set outname "InfoPlist.strings"
		}
	} 	
	plc::openOutFile [file join $outfolder $outname]
	plc::contextStart "localize"
}

proc plc::quote {item} {
	regsub -all {(\[|\])} $item "\\\\&" item
	return $item
}

proc plc::substitute {item} {
	global plc plc_def plc_int env
	set result ""
	if {$item eq "__FILE__"} {
		append result [file tail $plc(input_file)]
	} elseif {[info exists plc_int($item)]} {
		append result $plc_int($item)
	} elseif {[info exists plc_def($item)]} {
		append result $plc_def($item)
	} else {
		set strip ""
		set stripped [regexp "^__(.+)__$" $item -> strip]
		if {$stripped && [info exists env($strip)]} {
			# This is for compatibility with versions of plcompile <= 0.5: to
			# dereference an inherited variable, one had to enclose it between
			# double underscores.
			puts "Warning: $strip substitution: inherited variables do not have to be enclosed in double underscores anymore since vs 0.6"
			append result $env($strip)
		} else {
			append result $item
		}
	}
	return $result
}

proc plc::substDefinition {item} {
	global plc plc_def plc_int env
	set result ""
	if {$item eq "__FILE__"} {
		append result {[file tail $plc(input_file)]}
	} elseif {[info exists plc_int($item)]} {
		append result "\$plc_int($item)"
	} elseif {[info exists plc_def($item)]} {
		append result "\$plc_def($item)"
	} else {
		set strip ""
		set stripped [regexp "^__(.+)__$" $item -> strip]
		if {$stripped && [info exists env($strip)]} {
			# This is for compatibility with versions of plcompile <= 0.5: to
			# dereference an inherited variable, one had to enclose it between
			# double underscores.
			puts "Warning: $strip substitution: inherited variables do not have to be enclosed in double underscores anymore since vs 0.6"
			append result "\$env($strip)"
		} else {
			append result $item
		}
	}
	return $result
}

proc plc::contextStart {what} {
	global plc
	lappend plc(context) $what
	incr plc(contextlevel)
}

proc plc::contextEnd {what} {
	global plc
	set curr [lrange $plc(context) end end]
	set plc(context) [lreplace $plc(context) end end]
	incr plc(contextlevel) -1
	if {$curr ne "localize" && $curr ne "pkginfo"} {
		plc::writeTag $curr close 1
	} 
	if {$curr eq "plist" || $curr eq "localize" || $curr eq "pkginfo"} {
		close $plc(outid)
		set plc(parsing) 0
		set plc(localizing) 0
	} 
}

proc plc::checkContext {what} {
	global plc
	set context [lrange $plc(context) 0 0]
	if {$plc(parsing) || $context ne ""} {
		error "illegal '$what' keyword in context $context"
	} else {
		set plc(parsing) 1
	}
}

proc plc::openOutFile {outfile} {
	global plc
	set outfolder [file dir $outfile]
	if {![file exists $outfolder]} {
		file mkdir $outfolder
	} 
	set plc(outid) [open $outfile w+]
	fconfigure $plc(outid) -encoding $plc(output_encoding) -translation $plc(output_eol)
}

proc plc::writeOut {txt} {
	global plc
	puts -nonewline $plc(outid) $txt
}

# The 'which' argument can be "open", "close" or "empty".
proc plc::writeTag {tag {which "open"} {indent 0}} {
	global plc
	switch -- $which {
		"open" {
			if {[string match "plist*" $tag] || $tag eq "dict" || $tag eq "array"} {
				puts $plc(outid) "[plc::indent]<$tag>"				
			} else {
				puts -nonewline $plc(outid) "[plc::indent]<$tag>"
			}	
		}
		"close" {
			if {$indent} {
				puts $plc(outid) "[plc::indent]</$tag>"
			} else {
				puts $plc(outid) "</$tag>"
			}
		}
		"empty" {
			puts $plc(outid) "[plc::indent]<${tag}/>"
		}
	}
}

proc plc::writePreamble {} {
	global plc 
	set enc [string toupper $plc(output_encoding)]
	if {$enc eq "UNICODE"} {
		set enc "UTF-16"
	} 
	puts $plc(outid) "<?xml version=\"1.0\" encoding=\"$enc\"?>"
	# <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
	puts $plc(outid) "<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">"
}

proc plc::indent {} {
	global plc
	return [string repeat \t $plc(contextlevel)]
}

proc plc::setEol {name value} {
	global plc
	if {[lsearch $plc(eols) $value] == -1} {
		error "wrong value '$value' for $name. Should be one of [join $plc(eols) ", "]."
	} 
	set plc($name) $value
}

# (Bug 1413845) Predefined internal variables are invoked as __VAR__ but
# the user can also have variables using this scheme, so we must be
# careful. The former would be in the plc_int array and the latter in the
# plc_def array. If a user variable conflicts with a predefined one, the
# new var overwrites the old one and a warning is issued.
proc plc::defineMacro {name value} {
	global plc_def plc_int env

	if {[info exists plc_def($name)]} {
		if {[info exists env($name)]} {
			error "macro '$name' conflicts with inherited variable"
		} else {
			error "macro '$name' already defined"
		}
	} else {
		# Replace outer single quotes (if any) by double quotes
		regsub "^'(.*)'$" $value "\"\\1\"" value
		if {[info exists plc_int($name)]} {
			puts "Warning: macro definition of '$name' is overwriting a predefined variable"
			set arr plc_int
		} else {
			set arr plc_def
		} 
		set [set arr]($name) ""
		foreach a $value {
			append [set arr]($name) [plc::substitute $a]
		} 
	}
}

proc plc::resolveFile {name} {
	set result [file normalize $name]
	if {[file type $result] eq "link" && ![catch {file readlink $result} trgt]} {
		set result [file normalize $trgt]
	} 
	return $result
}

proc plc::encodeBase64 {hexstring} {
	global plc

	set result {}
	set state 0
	set length 0
	# Convert the hex string to binary
	set string [binary format H* $hexstring]
	# Process the input bytes 3-by-3
	binary scan $string c* X
	foreach {x y z} $X {
		# Wrap if necessary
		if {$plc(wraplen) && $length >= $plc(wraplen)} {
			append result "\n"
			set length 0
		}
		
		append result [lindex $plc(base64) [expr {($x >>2) & 0x3F}]] 
		if {$y != {}} {
			append result [lindex $plc(base64) [expr {(($x << 4) & 0x30) | (($y >> 4) & 0xF)}]] 
			if {$z != {}} {
				append result \
				  [lindex $plc(base64) [expr {(($y << 2) & 0x3C) | (($z >> 6) & 0x3)}]]
				append result [lindex $plc(base64) [expr {($z & 0x3F)}]]
			} else {
				set state 2
				break
			}
		} else {
			set state 1
			break
		}
		incr length 4
	}
	if {$state == 1} {
		append result [lindex $plc(base64) [expr {(($x << 4) & 0x30)}]]== 
	} elseif {$state == 2} {
		append result [lindex $plc(base64) [expr {(($y << 2) & 0x3C)}]]=  
	}
	return $result
}

# Support for PkgInfo files introduced in vs 0.2.
# Author: Franz Detro <franz.detro@native-instruments.de> (thanks!)
proc plc::generatePkgInfo {} {
	global plc env
	if {[info exists env(GENERATE_PKGINFO_FILE)] && [plc::boolValue $env(GENERATE_PKGINFO_FILE)] == 1} {
		error "you must turn off the 'Force Package Info Generation' setting in XCode to use the -pkginfo option"
	} 	
	# Get signature and type
	plc::getInfoForPkg "signature" "MACOS_CREATOR"
	plc::getInfoForPkg "type" "MACOS_TYPE"
	# Create the file
	set outfolder [file normalize [file join $plc(output_folder) $plc(in_package_directory)]]
	plc::contextStart "pkginfo"
	plc::openOutFile [file join $outfolder "PkgInfo"]
	puts $plc(outid) "$plc(bundle_type)$plc(bundle_signature)"
	plc::contextEnd "pkginfo"
}

proc plc::getInfoForPkg {kind macro} {
	global plc plc_def env
	
	# The signature and type used for the PkgInfo file are computed like this:
	# * if a PKGINFO_SIGNATURE or PKGINFO_TYPE preprocessor macro has
	#   been defined in the plc file, use it
	# * otherwise, if the CFBundleSignature and CFBundleType keys have
	#   been specified, use their value (captured in parseString)
	# * otherwise, if the MACOS_CREATOR and MACOS_TYPE variables have
	#   been defined in XCode, use their value
	# * as last resort, use "????"
	if {[info exists plc_def(PKGINFO_[string toupper $kind])]} {
		set plc(bundle_$kind) [set plc_def(PKGINFO_[string toupper $kind])]
	} elseif {![info exists plc(bundle_$kind)]} {
		if {[info exists env($macro)]} {
			set plc(bundle_$kind) $env($macro)
		} else {
			set plc(bundle_$kind) "????"
		}
	} 
	# Adjust string length
	set len [string length $plc(bundle_$kind)]
	if {$len == 4} {
		return
	} elseif {$len > 0 && $len < 4} {
		# Padd with blanks
		set plc(bundle_$kind) [format %-4s $plc(bundle_$kind)]
		puts "Warning: $kind for PkgInfo is shorter than 4-chars. Padding with blanks ('$plc(bundle_$kind)')"
	} elseif {$len > 4} {
		set plc(bundle_$kind) [string range $plc(bundle_$kind) 0 3]
		puts "Warning: $kind for PkgInfo is longer than 4-chars. Trimmed to '$plc(bundle_$kind)'"
	} else {
		set plc(bundle_$kind) "????"
		puts "Warning: $kind for PkgInfo is empty. Using '????' instead"
	}
}

# Usage proc
proc plc::usage { {showAll 0} } {
	global plc
	set script [file tail [info script]]
	set year [clock format [clock seconds] -format "%Y"]
	if {$showAll} {
		puts "$script, version $plc(version)"
		puts "Copyright (c) 2005-$year, Bernard Desgraupes <bdesgraupes@users.sourceforge.net>"
	}
	set usage "Usage:\n\t$script \[-input_encoding <enc>\] \[-output_encoding <enc>\]\n"
	append usage "\t\t\[-input_eol <eol>\] \[-output_eol <eol>\] \[-dest <folder>\] \[-o <name>\]\n"
	append usage "\t\t\[-Dmacro\[=value\]\]... \[-plist <version>\] \[-pkginfo\] \[-I <path>\]... plcFile"
	puts $usage
	puts "\t$script (-h\[elp\] | -e\[ncodings\] | -v\[ersion\])\n"
	if {$showAll} {
		puts "Default for -input_encoding is macRoman"
		puts "Default for -output_encoding is utf-8"
		puts "Default for -dest is dirname of \$TARGET_BUILD_DIR/\$INFOPLIST_PATH"
		puts "Default for -o is Info.plist"
		puts "Possible values for -input_eol and -output_eol: [join $plc(eols) ", "] (default is cr)"
		puts "Possible values for -plist: 0.9 and 1.0 (default is 1.0)"
		puts "Use the -pkginfo option to also generate a PkgInfo file"
		puts "Options -D and -I may occur multiple times"
	} 
}

proc plc::boolValue {str} {
	set val [string tolower $str]
	set result $str
	if {$val eq "true" || $val eq "yes" || $val eq "y" || $val eq "on"} {
		set result 1
	} elseif {[string is integer $str]} {
		set result [expr {$str != 0}]
	}
	return $result
}


# # Execute the command line now
# # ----------------------------
if {[info exists argv]} {
	if {[catch {eval plc::execute $argv} err]} {
		puts "Error: $err"
		# Don't leave pending file refs
		catch {close $plc(outid)}
		exit 1
	} 
} 


